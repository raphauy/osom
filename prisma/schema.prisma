
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  role          String    @default("user")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  client        Client?    @relation(fields: [clientId], references: [id], onDelete: NoAction)
  clientId      String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id                String   @id @default(cuid())
  name              String
  description       String?
  url               String?
  slug              String    @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  users             User[]
  properties        Property[]
  conversations     Conversation[]
  whatsappEndpoint  String?
  prompt            String?   @db.Text
}

model Property {
  id                     String    @id @default(cuid())
  idPropiedad            String?
  tipo                   String?
  titulo                 String?
  descripcion            String?
  zona                   String?
  ciudad                 String?
  departamento           String?
  pais                   String?
  enVenta                String?
  enAlquiler             String?
  enAlquilerTemporal     String?
  monedaVenta            String?
  precioVenta            String?
  monedaAlquiler         String?
  precioAlquiler         String?
  monedaAlquilerTemporal String?
  precioAlquilerTemporal String?
  alquilada              String?  
  dormitorios            String?
  banios                 String?
  garages                String?
  parrilleros            String?
  piscinas               String?
  calefaccion            String?
  amueblada              String?
  piso                   String?
  pisosEdificio          String?
  seguridad              String?
  asensor                String?
  lavadero               String?
  superficieTotal        String?
  superficieConstruida   String?
  monedaGastosComunes    String?
  gastosComunes          String?
  url                    String?

  client                Client?   @relation(fields: [clientId], references: [id], onDelete: NoAction)
  clientId              String?

  coincidences          Coincidence[]

  content               String?
  embedding Unsupported("vector(1536)")?
}

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone     String
  messages  Message[]
  client    Client  @relation(fields: [clientId], references: [id], onDelete: NoAction)
  clientId  String
}

model Message {
  id             String      @id @default(cuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  role           String
  content        String      @db.Text
  gptData        String?     @db.Text
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Pedido {
  id              String      @id @default(cuid())
  number          Int         @default(autoincrement())
  text            String      @db.Text
  contacto        String?
  operacion       String?
  tipo            String?
  presupuesto     String?
  zona            String?
  dormitorios     String?
  caracteristicas String?
  openaiJson      String?     @db.Text
  embeddings      Unsupported("vector(1536)")?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  coincidences    Coincidence[]
}

model Coincidence {
  id              String      @id @default(cuid())
  number          Int
  distance        Float
  pedido          Pedido      @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  pedidoId        String
  property        Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId      String
  createdAt       DateTime    @default(now())
}
