
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  role          String    @default("user")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  client        Client?    @relation(fields: [clientId], references: [id], onDelete: NoAction)
  clientId      String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id                String   @id @default(cuid())
  name              String
  description       String?
  url               String?
  slug              String    @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  users             User[]
  properties        Property[]
  conversations     Conversation[]
  whatsappEndpoint  String?
  budgetPercMin     Int?      @default(20)
  budgetPercMax     Int?      @default(20)
  prompt            String?   @db.Text
}

model Property {
  id                     String    @id @default(cuid())
  idPropiedad            String?
  tipo                   String?
  titulo                 String?
  descripcion            String?
  zona                   String?
  ciudad                 String?
  departamento           String?
  pais                   String?
  enVenta                String?
  enAlquiler             String?
  enAlquilerTemporal     String?
  monedaVenta            String?
  precioVenta            String?
  monedaAlquiler         String?
  precioAlquiler         String?
  monedaAlquilerTemporal String?
  precioAlquilerTemporal String?
  alquilada              String?  
  dormitorios            String?
  banios                 String?
  garages                String?
  parrilleros            String?
  piscinas               String?
  calefaccion            String?
  amueblada              String?
  piso                   String?
  pisosEdificio          String?
  seguridad              String?
  asensor                String?
  lavadero               String?
  superficieTotal        String?
  superficieConstruida   String?
  monedaGastosComunes    String?
  gastosComunes          String?
  url                    String?

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt @default(now())

  client                Client?   @relation(fields: [clientId], references: [id], onDelete: NoAction)
  clientId              String?

  content               String?
  embedding Unsupported("vector(1536)")?
  embeddingProyecto Unsupported("vector(1536)")?
}

model Conversation {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  phone       String
  messages    Message[]
  client      Client  @relation(fields: [clientId], references: [id], onDelete: NoAction)
  clientId    String
  operacion   String?
  tipo        String?
  zona        String?
  presupuesto String?
}

model Message {
  id                String      @id @default(cuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  role              String
  content           String      @db.Text
  gptData           String?     @db.Text
  conversationId    String
  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  promptTokens      Int       @default(0)
  completionTokens  Int       @default(0)
}
